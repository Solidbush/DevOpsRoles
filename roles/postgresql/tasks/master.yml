---

- name: "Создать базу данных"
  become: true
  become_user: postgres
  vars:
    ansible_ssh_pipelining: true
  postgresql_db:
    name: "{{ item.name }}"
    port: "{{ item.port | default(5432) }}"
  with_items: "{{ postgresql_databases }}"

- name: "Создать пользователей"
  become: true
  become_user: postgres
  vars:
    ansible_ssh_pipelining: true
  postgresql_user:
    name: "{{ item.name }}"
    password: "{{ item.password }}"
    encrypted: "{{ item.encrypted | default('true') }}"
    role_attr_flags: "{{ item.role_attr_flags | default(omit) }}"
    port: "{{ item.port | default(5432) }}"
  with_items: "{{ postgresql_users }}"

- name: "Назначить привилегии пользователям"
  become: true
  become_user: postgres
  vars:
    ansible_ssh_pipelining: true
  postgresql_privs:
    type: database
    database: "{{ item.name }}"
    roles: "{{ item.roles }}"
    privs: "{{ item.privs | default(ALL) }}"
  with_items: "{{ postgresql_databases }}"

- name: "Разрешить подключение для всех пользователей"
  become: true
  become_user: postgres
  vars:
    ansible_ssh_pipelining: true
  postgresql_pg_hba:
    dest: "{{ postgresql_config_dir }}/pg_hba.conf"
    contype: host
    address: 0.0.0.0/0
    databases: "{{ item.name }}"
    method: "{{ users_hba_method }}"
    users: "{{ item.roles }}"
  with_items: "{{ postgresql_databases }}"
  notify: "Перезапустить postgresql"

- name: "Обновить pg_hba для мастера"
  postgresql_pg_hba:
    dest: "{{ postgresql_config_dir }}/pg_hba.conf"
    contype: host
    databases: replication
    source: "{{ item }}/32"
    method: "{{ replication_hba_method }}"
    users: postgres
  with_items: "{{ replica_address }}"

- name: "Обновить postgresql.conf для мастера"
  blockinfile:
    path: "{{ postgresql_config_dir }}/postgresql.conf"
    block: |
      listen_addresses = 'localhost, {{ item }}'
      wal_level = hot_standby
      archive_mode = on
      archive_command = 'cd .'
      max_wal_senders = 8
      hot_standby = on
      port = 5432
  with_items: "{{ master_address }}"

- name: "Обновить пароль пользователя postgres"
  become: true
  become_user: postgres
  vars:
    ansible_ssh_pipelining: true
  postgresql_user:
    name: postgres
    password: "{{ postgresql_postgres_password }}"
  notify: "restart postgresql"

- name: "Запустить postgresql"
  service:
    name: postgresql.service
    state: started
